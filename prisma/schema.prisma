generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:@127.0.0.1:3306/curaproxDB"
}

model users {
  id           Int            @id @default(autoincrement())
  userName     String         @unique @db.VarChar(20)
  email        String         @unique(map: "email") @db.Char(50)
  emailConfirm Boolean        @default(false)
  password     String         @db.Char(255)
  role         UserRole       @default(member)
  status       Boolean        @default(true)
  avatar       String         @db.Text
  createAt     String
  updateAt     String
  address      address[]
  user_ip_list user_ip_list[]
  orders       orders[]
}

model user_ip_list {
  id         Int     @id @default(autoincrement())
  ip         String
  status     Boolean @default(true)
  userId     Int
  deviceName String
  createAt   String
  user       users   @relation(fields: [userId], references: [id])

  @@index([userId], map: "user_ip_list_userId_fkey")
}

model address {
  id        Int    @id @default(autoincrement())
  title     String @unique @db.VarChar(50)
  name      String @db.VarChar(20)
  line      String
  tel       Int
  provineId String
  userId    Int
  user      users  @relation(fields: [userId], references: [id])

  @@index([userId], map: "address_userId_fkey")
}

model categories {
  id       Int        @id @default(autoincrement())
  title    String
  status   Boolean    @default(true)
  products products[]
}

model products {
  id         Int             @id @default(autoincrement())
  name       String
  price      Float
  des        String          @default("updating...")
  sellStatus Boolean         @default(false)
  destroy    Boolean         @default(false)
  thumbnail  String          @db.LongText
  pictures   pictures[]
  categoryId Int
  category   categories      @relation(fields: [categoryId], references: [id])
  sold       order_details[]
}

model pictures {
  id        Int      @id @default(autoincrement())
  url       String   @db.LongText
  productId Int
  product   products @relation(fields: [productId], references: [id])

  @@index([productId], map: "pictures_productId_fkey")
}

enum UserRole {
  admin
  member
}

enum OrderMethod {
  cash
  zalo_pay
}

enum OrderStatus {
  shopping
  pending
  accepted
  shipping
  done
}

model orders {
  id         Int             @id @default(autoincrement())
  total      Float           @default(0)
  createAt   String
  updateAt   String
  method     OrderMethod?    @default(cash)
  paid       Boolean         @default(false)
  paidAt     String?
  userId     Int
  user       users           @relation(fields: [userId], references: [id])
  status     OrderStatus     @default(shopping)
  pending    String?
  acceptAt   String?
  shippingAt String?
  doneAt     String?
  detail     order_details[]
}

model order_details {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     orders   @relation(fields: [orderId], references: [id])
  productId Int
  product   products @relation(fields: [productId], references: [id])
  quantity  Int
  note      String   @default("")
}
